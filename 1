class Tree:
    def __init__(self, value=0, left=None, right=None, down_gens=0):
        self.value = value
        self.left = None
        self.right = None
        #self.down_gens = down_gens
    
    def to_str(self):
        return format(str(self.value), " ^4s")


def recurseOut(parent, iteration, integer_set):
    integer_set.add(parent)
    if iteration <= 0 or parent == 0: return
    if (parent-1) % 3 == 0 and parent>1: recurseOut(int((parent-1)/3), iteration-1, integer_set)
    recurseOut(parent*2, iteration-1, integer_set)

def recTree(root, depth, memo):
    if depth == 0: return
    if (root.value-1)%3 == 3 and root.value > 1:
        right_leaf = Tree((root.value-1)//3)
        recTree(right_left, depth-1, memo)
    left_leaf = Tree(root.value * 2)
    recTree(left_leaf, depth-1, memo)

def prntTree(root, depth):
    print("tree")
    row = [root]
    for i in range(depth):
        _row = []
        for r in row:
            print(r.to_str(), end="")
            _row.append(r.left)
            _row.append(r.right)
        row = _row
        print()

# list technique
#integer_set = set([])
#recurseOut(1, 10, integer_set)
#print(integer_set)
#sorted_list = sorted(list(integer_set))
#print(sorted_list)

# tree technique
depth = 3
memo = {}
root = Tree(1)
recTree(root, depth, memo)
prntTree(root, depth)

